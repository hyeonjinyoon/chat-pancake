@{
    ViewData["Title"] = "Chat";
}

<div style="width: 100%; max-width: 720px; padding: 5px; height: 100%; margin: 24px auto;">
    <div class="flex h-full w-full" style="width: 100%">
        <div id="tblContent" style="height: 100%; width: 100%; margin-bottom: 300px;">
        </div>

        <div style="position: fixed; bottom: 0; left: 0; width: 100%; align-items: center;">
            <div class="input-box-holder"
                 style="width: 100%; max-width: 720px; margin: 0 auto 48px; background: #262626;">

                <form onsubmit="SendInput(); return false;" style="width: 100%; height: 100%;">
                    <textarea class="input-box" id="input1" placeholder="> ..."
                              onkeydown="handleKeyDown(event)"></textarea>
                    <input type="submit" style="display: none;">
                </form>

                <div style="width: 100%; max-width: 720px; margin: 0 auto 4px;">
                    <button id="api-key" class="chat-button" type="button" onclick="openInput('apikey')"
                            style="margin-top: 2px;">
                        <p style="color:dodgerblue;">api key 세팅이 필요합니다</p>
                    </button>
                    <button id="model" class="chat-button" type="button" onclick="openInput('model')"
                            style="margin-top: 2px;">
                        model
                    </button>
                    <button id="instructions" class="chat-button" type="button" onclick="openInput('instructions')"
                            style="margin-top: 2px;">
                        지침 없음
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="hide-on-small">
    <div class="main-menu"
         style="
                 position: fixed;
                 left: 0px;
                 top: 0px;
                 z-index: 2;
                 height: 100%;
                 float: left;
                 flex-direction: column;
                  display: flex;
                  margin-left: auto; 
                  margin-right: auto;
                  padding-left: 10px;">
        @* <div *@
        @*     id="journal-button" *@
        @*     class="click-color unselectable hide-on-small" *@
        @*     onclick="ReceiveDiary()" *@
        @*     style="width: 100%; margin-bottom: 5px; height: 32px; cursor: pointer; border-radius: 10px; padding: 4px 8px;"> *@
        @*     $1$ 🎐🏮💼🥞 #1# *@
        @* </div> *@
        <div style='min-height:1px; width:100%; background-color:#1f1f1f;'></div>
        <div id="chat-list" class="scroll-vertical"
             style="overscroll-behavior: contain; 
             margin-top: 20px; flex: none; overflow-y: auto; max-height: 90%; 
             color: #919191;
             white-space: nowrap; 
             width: 100%;">
            <div
                style="cursor: pointer; margin: 0px; background-color: #1f1f1f; border-radius: 10px; padding: 4px 8px;">
                -
            </div>
        </div>
        <p id="user-id" class="hide-on-small" style="font-size: 12px; margin-top: auto;  color:#919191;"></p>
    </div>
</div>

<div id="modalInput"
     style="display:none; position:fixed; top:20%; left:50%; transform:translate(-50%, -20%); z-index: 9999; background:#2e2e2e; color:#ccc; border:1px solid #444; border-radius:20px; padding:15px; width: 100%; max-width:600px;">
    <div id="modalTitle" style="font-weight:bold; margin-bottom: 10px;"></div>
    <textarea id="modalText"
              class="input-box"
              style="width:100%; height:100px; min-height: 400px; background:#3e3e3e; color:#ccc; border:0; border-radius:4px; padding:8px;"></textarea>
    <div style="text-align: right; margin-top: 10px;">
        <button class="chat-button" type="button" onclick="saveModal()">저장</button>
        <button class="chat-button" type="button" onclick="closeModal()">닫기</button>
    </div>
</div>

@section Scripts
{
    <script type="text/javascript">
        let instructionText = "";
        let apiKeyText = "";
        let modelName = "-";
        let currentEdit = "";

        document.addEventListener("DOMContentLoaded", function () {
            const savedApiKey = getCookie("apiKey");
            if (savedApiKey) {
                apiKeyText = savedApiKey;
                OnApiKeySettingDone();
            }
        });

        function handleKeyDown(e) {
            if (e.key === "Enter" && !e.shiftKey) {
                e.preventDefault();
                SendInput();
            }
        }

        function GetDefaultModel(id) {
            fetch('@Url.Action("GetDefaultModel")', {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json; charset=utf-8'
                },
                body: JSON.stringify({
                    data: id
                })
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error("response error");
                    }
                    return response.json();
                })
                .then(data => {
                    modelName = data.model;
                    $('#model').text(modelName);
                })
                .catch(error => {
                    $('#chat-list').html("error");
                });
        }

        function GetChatList(id) {
            fetch('@Url.Action("GetChatList")', {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json; charset=utf-8'
                },
                body: JSON.stringify({
                    data: id
                })
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error("response error");
                    }
                    return response.json();
                })
                .then(data => {
                    var result = "";

                    data.content.forEach(element => {
                        var a = data.html
                            .replace('chatName', element.name)
                            .replace('sortId', element.id)
                            .replace('chatId', element.chatId)

                        result = result + a;
                    });
                    $('#chat-list').html(result);
                })
                .catch(error => {
                    $('#chat-list').html("error");
                });
        }

        function LoadChat(sortId, chatId) {
            const target = document.getElementById('chat-' + chatId);

            if (target) {
                target.scrollIntoView({behavior: 'smooth'});
                return;
            }

            let instruct = "";

            if (instructionText !== "")
                instruct = instructionText.substring(0, 6) + "...";

            $('#tblContent').append("<div id='chat-" + chatId + "' style='width: 100%;'>"
                + "<div id='question-" + chatId + "' style='margin-top: 8px; margin-left: auto; width: fit-content; max-width: 600px;" +
                "background-color: #262626; color: #ccc; padding: 9px; border-radius: 20px;" +
                "align-items: center; white-space: pre-wrap; overflow: auto;'>"
                + "</div>"
                + "<div style='margin-left: auto; width: fit-content; color: #919191'>"
                + instruct
                + "</div>"
                + "<div style='width: 20px; height: 20px; margin-left: auto; color: #919191; cursor: pointer;' onclick=copyToClipboard('question-" + chatId + "')>"
                + "<svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' class='bi bi-copy' viewBox='0 0 16 16'>                <path fill-rule='evenodd' d='M4 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2zm2-1a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1zM2 5a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1v-1h1v1a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h1v1z'/></svg>"
                + "</div>"
                + "</div>");

            $('#chat-' + chatId).append(
                "<div class='load-icon' id='load-" + chatId + "' style='margin-top: 8px; margin-right: auto; width: fit-content; max-width: 600px; background-color: #2b2b2b; color: #ccc; padding: 9px; border-radius: 20px; align-items: center;'>"
                + "🥞</div></div>");

            fetch('@Url.Action("GetChat")', {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json; charset=utf-8'
                },
                body: JSON.stringify({
                    data: sortId,
                    apiKey: apiKeyText
                })
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error("response error");
                    }
                    return response.json();
                })
                .then(data => {
                    document.getElementById("load-" + chatId).remove();
                    $('#chat-' + chatId).append(data.html);
                    $('#' + data.answerId).text(data.content);
                    $('#question-' + chatId).text(data.question);
                })
                .catch(error => {
                    document.getElementById("load-" + chatId).remove();
                    $('#chat-' + chatId).append("<div style='color:#ccc;'>error</div>");
                });
        }

        function openInput(type) {
            currentEdit = type;

            if (type === "instructions") {
                document.getElementById('modalTitle').textContent = "지시 사항 입력";
                document.getElementById('modalText').value = instructionText;
            } else if (type === "apikey") {
                document.getElementById('modalTitle').textContent = "API 키 입력";
                document.getElementById('modalText').value = apiKeyText;
            } else if (type === "model") {
                document.getElementById('modalTitle').textContent = "모델 id 입력";
                document.getElementById('modalText').value = modelName;
            }

            document.getElementById('modalInput').style.display = 'block';
        }

        function saveModal() {
            let val = document.getElementById('modalText').value;
            if (currentEdit === "instructions") {
                instructionText = val;
            } else if (currentEdit === "apikey") {
                apiKeyText = val;
                setCookie("apiKey", apiKeyText, 365);
            } else if (currentEdit === "model") {
                modelName = val;
            }
            closeModal();
        }

        function closeModal() {
            document.getElementById('modalInput').style.display = 'none';

            $('#model').text(modelName);

            if (instructionText === "") {
                $('#instructions').text('지침 없음');
            } else {
                $('#instructions').text('지침: ' + instructionText.substring(0, 6) + '...');
            }

            if (currentEdit === "apikey" && apiKeyText !== "") {
                OnApiKeySettingDone();
            }
        }

        function OnApiKeySettingDone() {
            $('#api-key').text("-");
            GetChatList(apiKeyText);
            GetDefaultModel(apiKeyText);
        }

        function SendInput() {
            let typped = document.getElementById('input1').value;
            document.getElementById('input1').value = '';

            if (typped == "") {
                depth = 0;
                $('#input-tab').html("");
                return;
            }

            let chatId = crypto.randomUUID();

            let instruct = "";

            if (instructionText !== "")
                instruct = instructionText.substring(0, 6) + "...";

            $('#tblContent').append("<div id='chat-" + chatId + "' style='width: 100%;'>"
                + "<div id='question-" + chatId + "' style='margin-top: 8px; margin-left: auto; width: fit-content; max-width: 600px;" +
                "background-color: #262626; color: #ccc; padding: 9px; border-radius: 20px;" +
                "align-items: center; white-space: pre-wrap; overflow: auto;'>"
                + "</div>"
                + "<div style='margin-left: auto; width: fit-content; color: #919191'>"
                + instruct
                + "</div>"
                + "<div style='width: 20px; height: 20px; margin-left: auto; color: #919191; cursor: pointer;' onclick=copyToClipboard('question-" + chatId + "')>"
                + "<svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' class='bi bi-copy' viewBox='0 0 16 16'>                <path fill-rule='evenodd' d='M4 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2zm2-1a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1zM2 5a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1v-1h1v1a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h1v1z'/></svg>"
                + "</div>"
                + "</div>");

            $('#question-' + chatId).text(typped.toString());

            $('#chat-' + chatId).append(
                "<div class='load-icon' id='load-" + chatId + "' style='margin-top: 8px; margin-right: auto; width: fit-content; max-width: 600px; background-color: #2b2b2b; color: #ccc; padding: 9px; border-radius: 20px; align-items: center;'>"
                + "🥞</div></div>");

            fetch('@Url.Action("ReceiveText")', {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json; charset=utf-8'
                },
                body: JSON.stringify({
                    data: typped,
                    chatId: chatId,
                    instructions: instructionText,
                    apiKey: apiKeyText,
                    modelId: modelName,
                })
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error("response error");
                    }
                    return response.json();
                })
                .then(data => {
                    document.getElementById("load-" + chatId).remove();
                    $('#chat-' + chatId).append(data.html);
                    $('#' + data.answerId).text(data.content);
                    $('#chat-list').prepend(data.listHtml);
                    $('#title').text(data.questionCondensed + " - Pancake");

                    document.getElementById('chat-' + chatId).scrollIntoView({behavior: 'smooth'});
                })
                .catch(error => {
                    document.getElementById("load-" + chatId).remove();
                    $('#chat-' + chatId).append("<div style='color:#ccc;'>error</div>");
                });
        }

        function copyToClipboard(id) {
            const textToCopy = document.getElementById(id).textContent;
            navigator.clipboard.writeText(textToCopy);
        }

        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                let date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (encodeURIComponent(value) || "") + expires + "; path=/";
        }

        function getCookie(name) {
            let nameEQ = name + "=";
            let ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i].trim();
                if (c.indexOf(nameEQ) === 0) {
                    return decodeURIComponent(c.substring(nameEQ.length, c.length));
                }
            }
            return null;
        }

    </script>
}
